import re, os, shutil
from casatools import ctsys
from casatasks import casalog
from casatasks import tclean

# ASV attributes
timeout = 10000
number = 2

class tclean_time_suite:
    """
    An example benchmark that adapts test_perf_tclean_mem_setweighting.py to asv
    """


    dataroot = ctsys.resolve(
        os.path.join(
            os.environ.get("ASV_CONF_DIR"),
            "casatestdata/measurementset/vla/",
        )
    )
    dataroot2 = ctsys.resolve(
        os.path.join(
            os.environ.get("ASV_CONF_DIR"),
            "casatestdata/measurementset/evla/",
        )
    )

    templogfile = "tclean_memprofile.log"

    imsize = 100
    phasecenter = "J2000 19h59m57.5s +40d49m00.077s"

    def setup_cache(self):
        # only run once for repeated tests
        pass
        # TODO: consider paramterizing here instead of setup/test methods for more accurate measurement

    def setup(self):
        ## fresh copy of the test MS to the tmp directory where tests are run ?
        # shutil.copytree(os.path.join(self.dataroot, self.input_ms),os.path.join(os.getcwd(), self.input_ms))
        pass
        # note: creating objects in setup method confounds memory benchmarks
        # (https://asv.readthedocs.io/en/stable/writing_benchmarks.html#memory)

    def time_onefield_defaults(self):
        """Adapted from test_task_tclean.py"""
        ret = tclean(
            vis=os.path.join(self.dataroot, "refim_twochan.ms"),
            imagename="tst_J2253+1608_ra_7h54m8_dec_-16:24:25.1",
            imsize=self.imsize,
            cell="8.0arcsec",
            interactive=0,
            parallel=False,
        )

    def time_onefield_clark(self):
        """Adapted from test_task_tclean.py"""
        ret = tclean(
            vis=os.path.join(self.dataroot, "refim_twochan.ms"),
            imagename="tst",
            phasecenter=self.phasecenter,
            imsize=self.imsize,
            deconvolver="clark",
            niter=10,
            cell="8.0arcsec",
            interactive=0,
            parallel=False,
        )

    def time_onefield_hogbom(self):
        """Adapted from test_task_tclean.py"""
        ret = tclean(
            vis=os.path.join(self.dataroot, "refim_twochan.ms"),
            imagename="tst_uid___A001_X1234a_X56cb.s19_0.J2253+1608_bp.more-dash.virtspw19.mfs.I.iter0.hogbom",
            phasecenter=self.phasecenter,
            imsize=self.imsize,
            deconvolver="hogbom",
            niter=10,
            cell="8.0arcsec",
            interactive=0,
            parallel=False,
        )

    def time_onefield_mem(self):
        """[onefield] Test_Onefield_mem : mfs with mem minor cycle"""
        ret = tclean(
            vis=os.path.join(self.dataroot2, "refim_eptwochan.ms"),
            imagename="tst",
            phasecenter=self.phasecenter,
            imsize=self.imsize,
            deconvolver="mem",
            niter=10,
            cell="8.0arcsec",
            interactive=0,
            parallel=False,
        )

    def time_onefield_multiscale(self):
        """[onefield] Test_Onefield_multiscale : mfs with multiscale minor cycle"""
        ret = tclean(
            vis=os.path.join(self.dataroot2, "refim_eptwochan.ms"),
            imagename="tst",
            phasecenter=self.phasecenter,
            imsize=self.imsize,
            deconvolver="multiscale",
            scales=[0, 20, 40, 100],
            niter=10,
            cell="8.0arcsec",
            interactive=0,
            parallel=False,
        )

    def teardown(self):
        # remove the data products generated by the task
        os.system("rm -rf memtest_*")
        os.system("rm -rf tst*")
        shutil.rmtree("refim_twochan.ms", ignore_errors=True)
        shutil.rmtree("refim_eptwochan.ms", ignore_errors=True)
        try:
            os.remove(os.path.join(os.getcwd(), self.templogfile))
        except FileNotFoundError:
            pass
