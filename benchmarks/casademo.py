import os, shutil
from casatools import ctsys
from casatasks import flagdata
from casatasks import gaincal
from casatasks import applycal
from casatasks import tclean
        
class tclean_memory_suite:
    """
    An example benchmark that adapts test_perf_tclean_mem_setweighting.py to asv
    """

    timeout = 1000

    dataroot = ctsys.resolve(os.path.join(os.environ.get('ASV_CONF_DIR'),'casatestdata/performance/tclean_mem_setweighting/'))
    input_ms = 'uid___A002_Xb9dfa4_X4724_target_spw16.ms'

    # assign our test dataset
    datapath = os.path.join(dataroot, input_ms)

    def setup_cache(self):
        # only run once for repeated tests
        pass
        # TODO: consider paramterizing here instead of setup/test methods for more accurate measurement
        
    def setup(self):
        # note: creating objects in setup method confounds memory benchmarks
        # (https://asv.readthedocs.io/en/stable/writing_benchmarks.html#memory)
        pass
        
    def peakmem_tclean_setweighting(self):
        """Adapted from CAS-13026"""
        imsize = [1344, 1512]
        nchan = 10  # original is nchan=2046
        phasecenter='ICRS 10:43:50.2473 -059.56.48.583'
        imagename = (f'memtest_{imsize[0]}x{imsize[1]}_uid___A001_X87a_X13d.s28_0.Pillar_3_sci.spw16.mfs.I.findcont')

        tclean(vis=self.datapath, imagename=imagename, phasecenter=phasecenter, scan=['17,11,13'],
               restoration=False, datacolumn='data', pbcor=False, spw='0', weighting='briggs',
               intent='OBSERVE_TARGET#ON_SOURCE', threshold='0mJy', robust=0.5, savemodel='none',
               imsize=imsize, stokes='I', nchan=nchan, deconvolver='hogbom', field='Pillar_3',
               npixels=0, niter=0, pblimit=0.2, restoringbeam=[], cell=['0.94arcsec'],
               start='230.490186515GHz', outframe='LSRK', specmode='cube',
               width='0.0610478663509MHz', gridder='mosaic', interactive=False, parallel=False)

    def teardown(self):
        # remove the data products generated by the task
        os.system('rm -rf memtest_*')
        shutil.rmtree(self.input_ms, ignore_errors=True)

class flagdata_suite:
    """
    An example benchmark that adapts CAS-13490 to asv
    """
    dataroot = ctsys.resolve('/.lustre/naasc/sciops/comm/scastro/casa/Tests/CAS-13490/performance/flagdata_runtime/')
    input_ms = 'uid___A002_Xe1f219_X6d0b_data_autocorr_WRAY_scan7.ms/'
    flags_cmd = 'uid___A002_Xe1f219_X6d0b.flagcmds.txt'

    timeout = 10000

    def setup_cache(self):
        # only run once for repeated tests
        pass

    def setup(self):
        # run for each repeated test
        
        # iterations per sample
        self.number = 2

        # Delete the MS if already exists
        if os.path.exists(self.input_ms):
            shutil.rmtree(self.input_ms)

        # Copy the flagcmd text file into temporary test directory
        if not os.path.exists(self.flags_cmd):
            shutil.copy(os.path.join(self.dataroot, self.flags_cmd), self.flags_cmd)

        # assign our test dataset
        self.datapath = os.path.join(self.dataroot, self.input_ms)

    def time_flagdata_summary(self):
        """hifa_importdata"""
        summary_dict = flagdata(vis=self.datapath, flagbackup=False, mode='summary')

    def time_flagdata_list(self):
        """hifa_flagdata"""
        flagdata(vis=self.datapath, mode='list', inpfile=self.flags_cmd, tbuff=[0.048, 0.0], 
                 action='apply', flagbackup=False, savepars=False)

    def time_flagdata_list_summary(self):
        """hifa_rawflagchans"""
        summary_dict = flagdata(vis=self.datapath, mode='list', inpfile=["mode='summary' name='before'"], 
                                reason='any', action='apply', flagbackup=False, savepars=False)

    def time_flagdata_bandpassflag(self):
        """hifa_bandpassflag"""
        flagdata(vis=self.datapath, mode='list',
                 inpfile=["intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='16' antenna='CM05' \
                 timerange='20:09:50~20:09:52' field='J1924-2914' reason='bad antenna timestamp'", 
                          "intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \
                          timerange='20:09:20~20:09:22' field='J1924-2914' reason='bad antenna timestamp'", 
                          "intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \
                          timerange='20:10:21~20:10:22' field='J1924-2914' reason='bad antenna timestamp'", 
                          "intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='22' antenna='CM05' \
                          timerange='20:09:30~20:09:32' field='J1924-2914' reason='bad antenna timestamp'"], 
                 reason='any', action='apply', flagbackup=False, savepars=False)

    def teardown(self):
        # remove the data products generated by the task
        os.remove(self.flags_cmd)
        shutil.rmtree(self.input_ms, ignore_errors=True)

class calibration_suite:
    """
    An example benchmark that adapts PLWG benchmark tests of 7m ALMA project 2019.1.01056.S (MOUS uid://A001/X1465/X1b3c) to asv
    """
    dataroot = ctsys.resolve('/.lustre/naasc/sciops/comm/scastro/pipeline/root_6.2/technical_tests/2019.1.01056.S_2021_07_20T07_45_18.149/SOUS_uid___A001_X1465_X1b3a/GOUS_uid___A001_X1465_X1b3b/MOUS_uid___A001_X1465_X1b3c/parallel_8/working/')
    input_ms = 'uid___A002_Xe1f219_X6d0b.ms'
    applycal_library = 'uid___A002_Xe1f219_X6d0b.ms.s12.4.callibrary'
    library_subtables = ['uid___A002_Xe1f219_X6d0b.ms.h_tsyscal.s6_1.tsyscal.tbl', 
                         'uid___A002_Xe1f219_X6d0b.ms.hifa_bandpassflag.s12_1.spw16_18_20_22.channel.solintinf.bcal.tbl',
                         'uid___A002_Xe1f219_X6d0b.ms.hifa_bandpassflag.s12_3.spw16_18_20_22.solintinf.gacal.tbl',
                         'uid___A002_Xe1f219_X6d0b.ms.hifa_bandpassflag.s12_4.spw16_18_20_22.solintint.gpcal.tbl']
    gaincal_table = library_subtables[3]

    timeout = 10000

    def setup_cache(self):
        # only run once for repeated tests
        pass

    def setup(self):
        # run for each repeated test
        
        # iterations per sample
        self.number = 2

        # Delete the MS if already exists locally
        if os.path.exists(self.input_ms):
            shutil.rmtree(self.input_ms)

        # Copy the callibrary (and associated tables) into temporary test directory
        if not os.path.exists(self.applycal_library):
            shutil.copy(os.path.join(self.dataroot, self.applycal_library), self.applycal_library)
            
        for st in self.library_subtables:
            if not os.path.exists(st):
                shutil.copytree(os.path.join(self.dataroot, st), st)

        # Copy the gain table into temporary test directory
        if not os.path.exists(self.gaincal_table):
            shutil.copytree(os.path.join(self.dataroot, self.gaincal_table), self.gaincal_table)

        # assign our test dataset
        self.datapath = os.path.join(self.dataroot, self.input_ms)

    def time_applycal_callib(self):
        """hifa_bandpassflag

        Note that this is from on-the-fly application of preliminary phase-up, bandpass, and amplitude caltables, not the later stage hifa_applycal
        Expected to take ~48s, could be sped up by splitting out SPWs (especially the square law detector windows) or applying to only one of them.
        """
        applycal( vis=self.datapath, field='J1924-2914', spw='16,18,20,22', intent='CALIBRATE_BANDPASS#ON_SOURCE', selectdata=True, timerange='', uvrange='', antenna='*&*', scan='', observation='', msselect='', docallib=True, callib=self.applycal_library, gaintable=[], gainfield=[], interp=[], spwmap=[], calwt=[True], parang=False, applymode='calflagstrict', flagbackup=False)

    def time_gaincal(self):
        """hifa_bandpassflag
        
        Expected to take ~7s
        """
        gaincal( vis=self.datapath, caltable=self.gaincal_table, field='J1924-2914', spw='16,18,20,22', intent='CALIBRATE_BANDPASS#ON_SOURCE', selectdata=True, timerange='', uvrange='', antenna='0~9', scan='', observation='', msselect='', solint='int',combine='', preavg=-1.0, refant='CM03,CM10,CM02,CM12,CM06,CM05,CM11,CM04,CM07,CM01', refantmode='flex', minblperant=4, minsnr=3.0, solnorm=False, normtype='mean', gaintype='G', smodel=[],calmode='p', solmode='', rmsthresh=[], corrdepflags=False, append=False, splinetime=3600.0, npointaver=3, phasewrap=180.0, docallib=False, callib='', gaintable=[self.gaincal_table], gainfield=['J1924-2914'], interp=['linear,linear'], spwmap=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 20, 22, 16, 16, 18, 18, 20, 20, 22], parang=False )

    def time_bandpass(self):
        """Could be taken from the same pipeline run as the other calibration benchmarks"""
        raise(NotImplementedError)

    def teardown(self):
        # remove the data products generated by the setup methods and the task
        os.remove(self.applycal_library)
        shutil.rmtree(self.gaincal_table)
        shutil.rmtree(self.input_ms, ignore_errors=True)
