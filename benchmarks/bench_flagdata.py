import os, shutil
import numpy
from casatools import ctsys
from casatasks import flagdata

# ASV iteration control (https://asv.readthedocs.io/en/stable/benchmarks.html#benchmark-attributes)
number = 1            # i.e., always run the setup and teardown methods
repeat = 10           # between 3 and 6 iterations per round w/ soft cutoff (start no new repeats) past 1m
rounds = 1            # amount of instances a "repeat block" is run to collect samples
min_run_count = 10     # enforce the min_repeat * rounds setting is met
timeout = 3600        # conservative 1hr hard cap should never be met for these test cases

# Helper functions for tests
def create_input(str_text, filename):
    """Save the string in a text file"""
    inp = filename
    cmd = str_text
    # remove file first
    if os.path.exists(inp):
        os.system('rm -f ' + inp)
    # save to a file
    with open(inp, 'w') as f:
        f.write(cmd)
    f.close()
    return

class BaseFlagSetup():
    # Test datasets; root directory is read from config.py
    datapath = ctsys.resolve("unittest/flagdata/")

    def setUp_WRay_perf(self):
        self.vis = "uid___A002_Xe1f219_X6d0b_data_autocorr_WRAY_scan7.ms/"
        if os.path.exists(self.vis):
            os.system('rm -rf ' + self.vis + '*')
        shutil.copytree(os.path.join(self.datapath,self.vis),
                        os.path.join(os.getcwd(), self.vis))

class ListMode(BaseFlagSetup):
    """
    Benchmark runtime of flagdata list mode used in the pipeline
    """
    flags_cmd = "uid___A002_Xe1f219_X6d0b.flagcmds.txt"

    def setup_cache(self):
        if not os.path.exists(self.flags_cmd):
            shutil.copyfile(
                os.path.join(self.datapath, self.flags_cmd), 
                os.path.join(os.getcwd(), self.flags_cmd)
            )

    def setup(self):
        self.setUp_WRay_perf()

    def time_list_tbuff(self):
        """Flagdata list mode from pipeline hifa_flagdata"""
        flagdata(
            vis=self.vis,
            mode="list",
            inpfile=self.flags_cmd,
            tbuff=[0.048, 0.0],
            action="apply",
            flagbackup=False,
            savepars=False,
        )

    def time_list_summary(self):
        """Flagdata list mode from pipeline hifa_rawflagchans"""
        summary_dict = flagdata(
            vis=self.vis,
            mode="list",
            inpfile=["mode='summary' name='before'"],
            reason="any",
            action="apply",
            flagbackup=False,
            savepars=False,
        )

    def teardown(self):
        # remove the data products generated by the task
        #os.remove(self.flags_cmd)
        shutil.rmtree(self.vis, ignore_errors=True)
