{
    "casademo.calibration_suite.time_applycal_callib": {
        "code": "class calibration_suite:\n    def time_applycal_callib(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\n    \n        Note that this is from on-the-fly application of preliminary phase-up, bandpass, and amplitude caltables, not the later stage hifa_applycal\n        Expected to take ~48s, could be sped up by splitting out SPWs (especially the square law detector windows) or applying to only one of them.\n        \"\"\"\n        applycal(\n            vis=self.input_ms,\n            field=\"J1924-2914\",\n            spw=\"16,18,20,22\",\n            intent=\"CALIBRATE_BANDPASS#ON_SOURCE\",\n            selectdata=True,\n            timerange=\"\",\n            uvrange=\"\",\n            antenna=\"*&*\",\n            scan=\"\",\n            observation=\"\",\n            msselect=\"\",\n            docallib=True,\n            callib=self.applycal_library,\n            gaintable=[],\n            gainfield=[],\n            interp=[],\n            spwmap=[],\n            calwt=[True],\n            parang=False,\n            applymode=\"calflagstrict\",\n            flagbackup=False,\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(\n            os.path.join(self.dataroot, self.input_ms),\n            os.path.join(os.getcwd(), self.input_ms),\n        )\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(\n            os.path.join(self.dataroot, self.applycal_library),\n            os.path.join(os.getcwd(), self.applycal_library),\n        )\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(\n                    os.path.join(self.dataroot, st), os.path.join(os.getcwd(), st)\n                )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_applycal_callib",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:287",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "9ef394762fe7135f58c94c0e46a655fae93e7d107904ceff94d228f23b89a589",
        "warmup_time": -1
    },
    "casademo.calibration_suite.time_bandpass": {
        "code": "class calibration_suite:\n    def time_bandpass(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\"\"\"\n        bandpass(\n            vis=self.input_ms,\n            caltable=self.bandpass_table,\n            field=\"J1924-2914\",\n            spw=\"22\",\n            intent=\"CALIBRATE_BANDPASS#ON_SOURCE\",\n            selectdata=True,\n            antenna=\"0~9\",\n            solint=\"inf,15.625000MHz\",\n            combine=\"scan\",\n            refant=\"CM03,CM10,CM02,CM12,CM06,CM05,CM11,CM04,CM07,CM01\",\n            minblperant=4,\n            minsnr=3.0,\n            solnorm=True,\n            bandtype=\"B\",\n            append=True,\n            gaintable=[self.tsyscal_table, self.gaincal_table],\n            gainfield=[\"J1924-2914\", \"nearest\"],\n            interp=[\"linear,linear\", \"linear,linear\"],\n            spwmap=[\n                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 20, 22, 16, 16, 18, 18, 20, 20, 22,],\n                [],\n            ],\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(\n            os.path.join(self.dataroot, self.input_ms),\n            os.path.join(os.getcwd(), self.input_ms),\n        )\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(\n            os.path.join(self.dataroot, self.applycal_library),\n            os.path.join(os.getcwd(), self.applycal_library),\n        )\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(\n                    os.path.join(self.dataroot, st), os.path.join(os.getcwd(), st)\n                )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_bandpass",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:287",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "f706aa044f6bc64b915996b7bdd6bc5666cae0eb7c47ff9a70b5bced6c9fbd0c",
        "warmup_time": -1
    },
    "casademo.calibration_suite.time_gaincal": {
        "code": "class calibration_suite:\n    def time_gaincal(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\n    \n        Expected to take ~7s\n        \"\"\"\n        gaincal(\n            vis=self.input_ms,\n            caltable=self.gaincal_table,\n            field=\"J1924-2914\",\n            spw=\"16,18,20,22\",\n            intent=\"CALIBRATE_BANDPASS#ON_SOURCE\",\n            selectdata=True,\n            timerange=\"\",\n            uvrange=\"\",\n            antenna=\"0~9\",\n            scan=\"\",\n            observation=\"\",\n            msselect=\"\",\n            solint=\"int\",\n            combine=\"\",\n            preavg=-1.0,\n            refant=\"CM03,CM10,CM02,CM12,CM06,CM05,CM11,CM04,CM07,CM01\",\n            refantmode=\"flex\",\n            minblperant=4,\n            minsnr=3.0,\n            solnorm=False,\n            normtype=\"mean\",\n            gaintype=\"G\",\n            smodel=[],\n            calmode=\"p\",\n            solmode=\"\",\n            rmsthresh=[],\n            corrdepflags=False,\n            append=False,\n            splinetime=3600.0,\n            npointaver=3,\n            phasewrap=180.0,\n            docallib=False,\n            callib=\"\",\n            gaintable=[self.gaincal_table],\n            gainfield=[\"J1924-2914\"],\n            interp=[\"linear,linear\"],\n            spwmap=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 20, 22, 16, 16, 18, 18, 20, 20, 22,],\n            parang=False,\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(\n            os.path.join(self.dataroot, self.input_ms),\n            os.path.join(os.getcwd(), self.input_ms),\n        )\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(\n            os.path.join(self.dataroot, self.applycal_library),\n            os.path.join(os.getcwd(), self.applycal_library),\n        )\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(\n                    os.path.join(self.dataroot, st), os.path.join(os.getcwd(), st)\n                )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_gaincal",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:287",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "56f8a9022caccdafe4240fb9a2766b2d5d56cc1c784bd724822d3b040f5b5309",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_bandpassflag": {
        "code": "class flagdata_suite:\n    def time_flagdata_bandpassflag(self):\n        \"\"\"hifa_bandpassflag\"\"\"\n        flagdata(\n            vis=self.datapath,\n            mode=\"list\",\n            inpfile=[\n                \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='16' antenna='CM05' \\\n                 timerange='20:09:50~20:09:52' field='J1924-2914' reason='bad antenna timestamp'\",\n                \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \\\n                          timerange='20:09:20~20:09:22' field='J1924-2914' reason='bad antenna timestamp'\",\n                \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \\\n                          timerange='20:10:21~20:10:22' field='J1924-2914' reason='bad antenna timestamp'\",\n                \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='22' antenna='CM05' \\\n                          timerange='20:09:30~20:09:32' field='J1924-2914' reason='bad antenna timestamp'\",\n            ],\n            reason=\"any\",\n            action=\"apply\",\n            flagbackup=False,\n            savepars=False,\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(\n                os.path.join(self.dataroot, self.flags_cmd),\n                os.path.join(os.getcwd(), self.flags_cmd),\n            )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_bandpassflag",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:182",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "f55e0ffa6be9d655555c5081a0e7bf2bc00b253273ba7c220de0bd2cfb3baf6c",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_list": {
        "code": "class flagdata_suite:\n    def time_flagdata_list(self):\n        \"\"\"hifa_flagdata\"\"\"\n        flagdata(\n            vis=self.datapath,\n            mode=\"list\",\n            inpfile=self.flags_cmd,\n            tbuff=[0.048, 0.0],\n            action=\"apply\",\n            flagbackup=False,\n            savepars=False,\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(\n                os.path.join(self.dataroot, self.flags_cmd),\n                os.path.join(os.getcwd(), self.flags_cmd),\n            )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:182",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "1a40b66ffb4a43d48af3407bae817ed4f7667fe778880859384f5f2e7c9c5d1f",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_list_summary": {
        "code": "class flagdata_suite:\n    def time_flagdata_list_summary(self):\n        \"\"\"hifa_rawflagchans\"\"\"\n        summary_dict = flagdata(\n            vis=self.datapath,\n            mode=\"list\",\n            inpfile=[\"mode='summary' name='before'\"],\n            reason=\"any\",\n            action=\"apply\",\n            flagbackup=False,\n            savepars=False,\n        )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(\n                os.path.join(self.dataroot, self.flags_cmd),\n                os.path.join(os.getcwd(), self.flags_cmd),\n            )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_list_summary",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:182",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "3eb284062687484026a1defb4fceb705e83b244e37405f8794d431940ff44b08",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_summary": {
        "code": "class flagdata_suite:\n    def time_flagdata_summary(self):\n        \"\"\"hifa_importdata\"\"\"\n        summary_dict = flagdata(vis=self.datapath, flagbackup=False, mode=\"summary\")\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(\n                os.path.join(self.dataroot, self.flags_cmd),\n                os.path.join(os.getcwd(), self.flags_cmd),\n            )\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_summary",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:182",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "9e569fb4e2a2f68e59c510bbf889632173be867104a4e5ba5a98d0eb110e82fb",
        "warmup_time": -1
    },
    "casademo.tclean_memory_suite.peakmem_tclean_setweighting": {
        "code": "class tclean_memory_suite:\n    def peakmem_tclean_setweighting(self):\n        \"\"\"Adapted from CAS-13026\"\"\"\n        tclean(\n            vis=self.datapath,\n            imagename=self.imagename,\n            phasecenter=self.phasecenter,\n            scan=[\"17,11,13\"],\n            restoration=False,\n            datacolumn=\"data\",\n            pbcor=False,\n            spw=\"0\",\n            weighting=\"briggs\",\n            intent=\"OBSERVE_TARGET#ON_SOURCE\",\n            threshold=\"0mJy\",\n            robust=0.5,\n            savemodel=\"none\",\n            imsize=self.imsize,\n            stokes=\"I\",\n            nchan=self.nchan,\n            deconvolver=\"hogbom\",\n            field=\"Pillar_3\",\n            npixels=0,\n            niter=0,\n            pblimit=0.2,\n            restoringbeam=[],\n            cell=[\"0.94arcsec\"],\n            start=\"230.490186515GHz\",\n            outframe=\"LSRK\",\n            specmode=\"cube\",\n            width=\"0.0610478663509MHz\",\n            gridder=\"mosaic\",\n            interactive=False,\n            parallel=False,\n        )\n\n    def setup(self):\n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # shutil.copytree(os.path.join(self.dataroot, self.input_ms),os.path.join(os.getcwd(), self.input_ms))\n        pass\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "name": "casademo.tclean_memory_suite.peakmem_tclean_setweighting",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:37",
        "timeout": 10000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "b08240b9d9211ba7e2ce323aae697e4b25deb8a6db4c5e2e48519cedc4707769"
    },
    "casademo.tclean_memory_suite.track_tclean_file_descriptors_cubemode_mosaic_briggs": {
        "code": "class tclean_memory_suite:\n    def track_tclean_file_descriptors_cubemode_mosaic_briggs(self):\n        \"\"\"Adapted from CAS-8755\n    \n        https://open-bitbucket.nrao.edu/projects/CASA/repos/casa6/browse/casatests/performance/test_perf_tclean_mem_setweighting.py?at=refs%2Fheads%2FCAS-13026#166-225\n    \n        Requires user configuration ~/.casa/rc to contain `synthesis.imager.memprofile.enable: 1`\n        Expected output is casa.synthesis.imager.memprofile.PID.HOSTNAME.DATE_TIME_when_test_started.txt\n        \"\"\"\n        # attribute for tracking metric\n        unit = \"file descriptors\"\n    \n        casalog.setlogfile(self.templogfile)\n        tclean(\n            vis=self.datapath,\n            imagename=self.imagename,\n            phasecenter=self.phasecenter,\n            scan=[\"17,11,13\"],\n            restoration=False,\n            datacolumn=\"data\",\n            pbcor=False,\n            spw=\"0\",\n            weighting=\"briggs\",\n            intent=\"OBSERVE_TARGET#ON_SOURCE\",\n            threshold=\"0mJy\",\n            robust=0.5,\n            savemodel=\"none\",\n            imsize=self.imsize,\n            stokes=\"I\",\n            nchan=self.nchan,\n            deconvolver=\"hogbom\",\n            field=\"Pillar_3\",\n            npixels=0,\n            niter=0,\n            pblimit=0.2,\n            restoringbeam=[],\n            cell=[\"0.94arcsec\"],\n            start=\"230.490186515GHz\",\n            outframe=\"LSRK\",\n            specmode=\"cube\",\n            width=\"0.0610478663509MHz\",\n            gridder=\"mosaic\",\n            interactive=False,\n            parallel=False,\n        )\n    \n        with open(self.templogfile) as mylog:\n            for line in mylog:\n                a_match = re.search(\"casa.synthesis.imager.memprofile\", line)\n                if a_match:\n                    str_match = a_match.string\n                    break\n    \n        # Get name of memprofile created by tclean\n        (start, middle, end) = str_match.partition(\"casa.synthesis.imager.memprofile\")\n        mem_profile = middle + end.rstrip()\n    \n        # Get the memory values of the second column named MemRSS_(VmRSS)_MB, for each row\n        with open(mem_profile, \"r\") as mfile:\n            memdict = OrderedDict()\n            maxFDSize = 0\n            for myrow in mfile:\n                linelist = []\n                print(myrow.rstrip())\n                if myrow.startswith(\"#\"):\n                    continue\n    \n                linelist = myrow.split(\",\")\n                tclean_step = str(linelist[-1].rstrip())\n                memdict[tclean_step.strip(\"[]\")] = int(linelist[1])\n                maxFDSize = max(maxFDSize, int(linelist[7]))\n    \n        return maxFDSize\n\n    def setup(self):\n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        # shutil.copytree(os.path.join(self.dataroot, self.input_ms),os.path.join(os.getcwd(), self.input_ms))\n        pass\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "name": "casademo.tclean_memory_suite.track_tclean_file_descriptors_cubemode_mosaic_briggs",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:37",
        "timeout": 10000,
        "type": "track",
        "unit": "file descriptors",
        "version": "e3aeb6edf33f78d2db6d58dfc61576924a9768f7a205164fcd839666bde1ae63"
    },
    "version": 2
}
