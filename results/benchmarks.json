{
    "casademo.calibration_suite.time_applycal_callib": {
        "code": "class calibration_suite:\n    def time_applycal_callib(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\n    \n        Note that this is from on-the-fly application of preliminary phase-up, bandpass, and amplitude caltables, not the later stage hifa_applycal\n        Expected to take ~48s, could be sped up by splitting out SPWs (especially the square law detector windows) or applying to only one of them.\n        \"\"\"\n        applycal( vis=self.input_ms, field='J1924-2914', spw='16,18,20,22', intent='CALIBRATE_BANDPASS#ON_SOURCE', selectdata=True, timerange='', uvrange='', antenna='*&*', scan='', observation='', msselect='', docallib=True, callib=self.applycal_library, gaintable=[], gainfield=[], interp=[], spwmap=[], calwt=[True], parang=False, applymode='calflagstrict', flagbackup=False)\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n                        os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(os.path.join(self.dataroot, self.applycal_library),\n                        os.path.join(os.getcwd(), self.applycal_library))\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(os.path.join(self.dataroot, st),\n                                os.path.join(os.getcwd(), st))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_applycal_callib",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:136",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "1f6437b2270507d06f2c91c35b12dce1187d02851c4b0d0c872bbcfda3e5c4f6",
        "warmup_time": -1
    },
    "casademo.calibration_suite.time_bandpass": {
        "code": "class calibration_suite:\n    def time_bandpass(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\n        \"\"\"\n        bandpass( vis=self.input_ms, caltable=self.bandpass_table, field='J1924-2914', spw='22', intent='CALIBRATE_BANDPASS#ON_SOURCE', selectdata=True, antenna='0~9', solint='inf,15.625000MHz', combine='scan', refant='CM03,CM10,CM02,CM12,CM06,CM05,CM11,CM04,CM07,CM01', minblperant=4, minsnr=3.0, solnorm=True, bandtype='B', append=True, gaintable=[self.tsyscal_table, self.gaincal_table], gainfield=['J1924-2914', 'nearest'], interp=['linear,linear', 'linear,linear'], spwmap=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 20, 22, 16, 16, 18, 18, 20, 20, 22], []] )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n                        os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(os.path.join(self.dataroot, self.applycal_library),\n                        os.path.join(os.getcwd(), self.applycal_library))\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(os.path.join(self.dataroot, st),\n                                os.path.join(os.getcwd(), st))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_bandpass",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:136",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "a69d32cd1360ece09039f1051989506a7673f5a708021e87c81e0936374d64ce",
        "warmup_time": -1
    },
    "casademo.calibration_suite.time_gaincal": {
        "code": "class calibration_suite:\n    def time_gaincal(self):\n        \"\"\"Taken from the hifa_bandpassflag step of ALMA pipeline run 2019.1.01056.S_2021_07_20T07_45_18.149/\n    \n        Expected to take ~7s\n        \"\"\"\n        gaincal( vis=self.input_ms, caltable=self.gaincal_table, field='J1924-2914', spw='16,18,20,22', intent='CALIBRATE_BANDPASS#ON_SOURCE', selectdata=True, timerange='', uvrange='', antenna='0~9', scan='', observation='', msselect='', solint='int',combine='', preavg=-1.0, refant='CM03,CM10,CM02,CM12,CM06,CM05,CM11,CM04,CM07,CM01', refantmode='flex', minblperant=4, minsnr=3.0, solnorm=False, normtype='mean', gaintype='G', smodel=[],calmode='p', solmode='', rmsthresh=[], corrdepflags=False, append=False, splinetime=3600.0, npointaver=3, phasewrap=180.0, docallib=False, callib='', gaintable=[self.gaincal_table], gainfield=['J1924-2914'], interp=['linear,linear'], spwmap=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 20, 22, 16, 16, 18, 18, 20, 20, 22], parang=False )\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # fresh copy of the test MS to the tmp directory where tests are run\n        shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n                        os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the callibrary (and associated tables) into temporary test directory\n        shutil.copyfile(os.path.join(self.dataroot, self.applycal_library),\n                        os.path.join(os.getcwd(), self.applycal_library))\n    \n        for st in self.library_subtables:\n            if not os.path.exists(st):\n                shutil.copytree(os.path.join(self.dataroot, st),\n                                os.path.join(os.getcwd(), st))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.calibration_suite.time_gaincal",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:136",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "70a393fa53b72183c406b9cc585dca7828b9b8d585b8077a80e0946ee81ebeb0",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_bandpassflag": {
        "code": "class flagdata_suite:\n    def time_flagdata_bandpassflag(self):\n        \"\"\"hifa_bandpassflag\"\"\"\n        flagdata(vis=self.datapath, mode='list',\n                 inpfile=[\"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='16' antenna='CM05' \\\n                 timerange='20:09:50~20:09:52' field='J1924-2914' reason='bad antenna timestamp'\",\n                          \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \\\n                          timerange='20:09:20~20:09:22' field='J1924-2914' reason='bad antenna timestamp'\",\n                          \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='20' antenna='CM05' \\\n                          timerange='20:10:21~20:10:22' field='J1924-2914' reason='bad antenna timestamp'\",\n                          \"intent='CALIBRATE_BANDPASS#ON_SOURCE' spw='22' antenna='CM05' \\\n                          timerange='20:09:30~20:09:32' field='J1924-2914' reason='bad antenna timestamp'\"],\n                 reason='any', action='apply', flagbackup=False, savepars=False)\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        #if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(os.path.join(self.dataroot, self.flags_cmd),\n                            os.path.join(os.getcwd(), self.flags_cmd))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_bandpassflag",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:64",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "6bc01de4a73ffea44f2190b51350292cc1e1256989be0f26cc4ec77341df934a",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_list": {
        "code": "class flagdata_suite:\n    def time_flagdata_list(self):\n        \"\"\"hifa_flagdata\"\"\"\n        flagdata(vis=self.datapath, mode='list', inpfile=self.flags_cmd, tbuff=[0.048, 0.0],\n                 action='apply', flagbackup=False, savepars=False)\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        #if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(os.path.join(self.dataroot, self.flags_cmd),\n                            os.path.join(os.getcwd(), self.flags_cmd))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:64",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "f4d15370d3c2c0c746d0c9c28b87ee190865ebfa9e210cc5773201bea0df7bf9",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_list_summary": {
        "code": "class flagdata_suite:\n    def time_flagdata_list_summary(self):\n        \"\"\"hifa_rawflagchans\"\"\"\n        summary_dict = flagdata(vis=self.datapath, mode='list', inpfile=[\"mode='summary' name='before'\"],\n                                reason='any', action='apply', flagbackup=False, savepars=False)\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        #if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(os.path.join(self.dataroot, self.flags_cmd),\n                            os.path.join(os.getcwd(), self.flags_cmd))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_list_summary",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:64",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "58e4c1cc3e1c3c5f723c910c861bad52078405a7026f0321526fad1a15b04ee3",
        "warmup_time": -1
    },
    "casademo.flagdata_suite.time_flagdata_summary": {
        "code": "class flagdata_suite:\n    def time_flagdata_summary(self):\n        \"\"\"hifa_importdata\"\"\"\n        summary_dict = flagdata(vis=self.datapath, flagbackup=False, mode='summary')\n\n    def setup(self):\n        # run for each repeated test\n    \n        # iterations per sample\n        self.number = 2\n    \n        # assign our test dataset\n        self.datapath = os.path.join(self.dataroot, self.input_ms)\n    \n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        #if not os.path.exists(self.input_ms):\n        #    shutil.copytree(os.path.join(self.dataroot, self.input_ms),\n        #                    os.path.join(os.getcwd(), self.input_ms))\n    \n        # Copy the flagcmd text file into temporary test directory\n        if not os.path.exists(self.flags_cmd):\n            shutil.copyfile(os.path.join(self.dataroot, self.flags_cmd),\n                            os.path.join(os.getcwd(), self.flags_cmd))\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "min_run_count": 2,
        "name": "casademo.flagdata_suite.time_flagdata_summary",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:64",
        "timeout": 10000,
        "type": "time",
        "unit": "seconds",
        "version": "7d302987a4e4e75e43325fd83f2c968688e4b8a56a6476db46a4fcc0bc003e95",
        "warmup_time": -1
    },
    "casademo.tclean_memory_suite.peakmem_tclean_setweighting": {
        "code": "class tclean_memory_suite:\n    def peakmem_tclean_setweighting(self):\n        \"\"\"Adapted from CAS-13026\"\"\"\n        imsize = [1344, 1512]\n        nchan = 10  # original is nchan=2046\n        phasecenter='ICRS 10:43:50.2473 -059.56.48.583'\n        imagename = (f'memtest_{imsize[0]}x{imsize[1]}_uid___A001_X87a_X13d.s28_0.Pillar_3_sci.spw16.mfs.I.findcont')\n    \n        tclean(vis=self.datapath, imagename=imagename, phasecenter=phasecenter, scan=['17,11,13'],\n               restoration=False, datacolumn='data', pbcor=False, spw='0', weighting='briggs',\n               intent='OBSERVE_TARGET#ON_SOURCE', threshold='0mJy', robust=0.5, savemodel='none',\n               imsize=imsize, stokes='I', nchan=nchan, deconvolver='hogbom', field='Pillar_3',\n               npixels=0, niter=0, pblimit=0.2, restoringbeam=[], cell=['0.94arcsec'],\n               start='230.490186515GHz', outframe='LSRK', specmode='cube',\n               width='0.0610478663509MHz', gridder='mosaic', interactive=False, parallel=False)\n\n    def setup(self):\n        ## fresh copy of the test MS to the tmp directory where tests are run ?\n        #shutil.copytree(os.path.join(self.dataroot, self.input_ms),os.path.join(os.getcwd(), self.input_ms))\n        pass\n\n    def setup_cache(self):\n        # only run once for repeated tests\n        pass",
        "name": "casademo.tclean_memory_suite.peakmem_tclean_setweighting",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/export/home/mano/Workspace/clones/casabench/benchmarks/casademo.py:22",
        "timeout": 10000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "3fb5214d1e8e5bf8170efbe8114cd88b0e1e51db87c955bc588eb95ba91e4f71"
    },
    "version": 2
}